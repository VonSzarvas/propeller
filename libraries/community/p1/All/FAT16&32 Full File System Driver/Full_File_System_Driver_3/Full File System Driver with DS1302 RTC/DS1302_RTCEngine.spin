{{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// DS1302 Real Time Clock Engine//// Author: Kwabena W. Agyeman// Updated: 3/23/2011// Designed For: P8X32A// Version: 1.0//// Copyright (c) 2011 Kwabena W. Agyeman// See end of file for terms of use.//// Update History://// v1.0 - Original release - 3/23/2011.//// For each included copy of this object only one spin interpreter should access it at a time.//// Nyamekye,//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 3-Wire Circuit://// Input Output Pin Number --- DS1302 I/O Pin.//// Serial Clock Pin Number --- DS1302 SCLK Pin.//// Chip Enable Pin Number --- DS1302 CE Pin.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}CON  #1, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday  #1, January, February, March, April, May, June, July, August, September, October, November, December  #0, D_0_R_0K, #5, D_1_R_2K, #6, D_1_R_4K, #7, D_1_R_8K, #9, D_2_R_2K, #10, D_2_R_4K, #11, D_2_R_8KVAR byte time[8]PUB clockSecond '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached second (0 - 59) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return timePUB clockMinute '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached minute (0 - 59) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return time[1]PUB clockHour '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached hour (0 - 23) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return time[2]PUB clockDay '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached day (1 - 7) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return time[5]PUB clockDate '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached date (1 - 31) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return time[3]PUB clockMonth '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached month (1 - 12) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return time[4]PUB clockYear '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached year (2000 - 2099) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return (time[6] + 2_000)PUB clockMeridiemHour '' 6 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the cached meridiem hour (12 - 11) from the real time clock.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  result := (clockHour // 12)  ifnot(result)    result += 12PUB clockMeridiemTime '' 6 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns true if the cached meridiem hour is post meridiem and false if the meridiem cached hour is ante meridiem.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return (clockHour => 12)PUB trickleCharge(value) '' 8 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the trickle charge register value.'' //'' // Make sure the time has been initialized or all the registers may be write protected.'' //'' // Value - The new value to change the trickle charge register to. (0 - 15). Please refer to the DS1302 datasheet.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  startDataTransfer  transmitPacket(constant(%1_0_01000_0))  transmitPacket(constant(%1010_0000) | (value & $F))  stopDataTransferPUB readTime | buffer, counter '' 9 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Caches the current real time clock settings.'' //'' // Call "checkSecond" to get the real time clock second after calling this method first.'' // Call "checkMinute" to get the real time clock minute after calling this method first.'' // Call "checkHour" to get the real time clock hour after calling this method first.'' // Call "checkDay" to get the real time clock day after calling this method first.'' // Call "checkDate" to get the real time clock date after calling this method first.'' // Call "checkMonth" to get the real time clock month after calling this method first.'' // Call "checkYear" to get the real time clock year after calling this method first.'' // Call "checkMeridiemHour" to get the real time clock meridiem hour after calling this method first.'' // Call "checkMeridiemTime" to get the real time clock meridiem time after calling this method first.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  startDataTransfer  transmitPacket(constant(%1_0_11111_1))  repeat counter from 0 to 7    buffer := receivePacket    time[counter] := (((buffer >> 4) * 10) + (buffer & $F))  stopDataTransferPUB writeTime(second, minute, hour, day, date, month, year) | index, information[7] '' 22 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the current real time clock time settings.'' //'' // Second - Number to set the second to between 0 - 59.'' // Minute - Number to set the minute to between 0 - 59.'' // Hour - Number to set the hour to between 0 - 23.'' // Day - Number to set the day to between 1 - 7.'' // Date - Number to set the date to between 1 - 31.'' // Month - Number to set the month to between 1 - 12.'' // Year - Number to set the year to between 2000 - 2099.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  information := ((second <# 59) #> 0)  information[1] := ((minute <# 59) #> 0)  information[2] := ((hour <# 23) #> 0)  information[5] := ((day <# 7) #> 1)  information[3] := ((date <# 31) #> 1)  information[4] := ((month <# 12) #> 1)  information[6] := (((year <# 2_099) #> 2_000) - 2_000)  startDataTransfer  transmitPacket(constant(%1_0_00111_0))  transmitPacket(0)  stopDataTransfer  startDataTransfer  transmitPacket(constant(%1_0_11111_0))  repeat index from 0 to 6    transmitPacket(((information[index] / 10) << 4) + (information[index] // 10))  transmitPacket(0)  stopDataTransferPUB readSRAM(index) '' 8 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the selected SRAM value at the specified index.'' //'' // Index - The byte location in SRAM to check. (0 - 30).'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  startDataTransfer  transmitPacket(constant(%1_1_00000_1) | (((index <# 30) #> 0) << 1))  result := receivePacket  stopDataTransferPUB writeSRAM(index, value) '' 9 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the selected SRAM value at the specified index to the specified value.'' //'' // Make sure the time has been initialized or all the registers may be write protected.'' //'' // Index - The byte location in SRAM to change. (0 - 30).'' // Value - The value to change the byte location to. (0 - 255).'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  startDataTransfer  transmitPacket(constant(%1_1_00000_0) | (((index <# 30) #> 0) << 1))  transmitPacket(value)  stopDataTransferPUB pauseForSeconds(number) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Pauses execution for a number of seconds.'' //'' // Number - Number of seconds to pause for between 0 and 4,294,967,295.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  result := cnt  repeat number    result += clkfreq    waitcnt(result)PUB pauseForMilliseconds(number) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Pauses execution for a number of milliseconds.'' //'' // Number - Number of milliseconds to pause for between 0 and 4,294,967,295.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  result := cnt  repeat number    result += (clkfreq / 1_000)    waitcnt(result)PUB RTCEngineStart(IOPinNumber, SCLKPinNumber, CEPinNumber) '' 9 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Changes the 3-Wire Circuit pins.'' //'' // Returns true on success and false on failure.'' //'' // IOPinNumber - Pin to use to drive the I/O line. Between 0 and 31.'' // SCLKPinNumber - Pin to use to drive the SCLK line. Between 0 and 31.'' // CEPinNumber - Pin to use to drive the CE line. Between 0 and 31.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  RTCEngineStop  IOPin := IOPinNumber  SCLKPin := SCLKPinNumber  CEPin := CEPinNumber  return (IOPinNumber <> SCLKPinNumber) and (IOPinNumber <> CEPinNumber) and (SCLKPinNumber <> CEPinNumber) and (chipver == 1)PUB RTCEngineStop '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Clears the cached real time clock settings.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  bytefill(@time, $FF, 8)PRI transmitPacket(value) ' 4 Stack Longs  repeat 8    dira[IOPin] := true    outa[IOPin] := value    outa[SCLKPin] := true    dira[IOPin] := false    outa[SCLKPin] := false    value >>= 1PRI receivePacket ' 3 Stack Longs  repeat 8    result += result + ina[IOPin]    outa[SCLKPin] := true    outa[SCLKPin] := false  result ><= 8PRI startDataTransfer ' 3 Stack Longs  outa[CEPin] := true  dira[CEPin] := true  dira[SCLKPin] := truePRI stopDataTransfer ' 3 Stack Longs  dira[SCLKPin] := false  outa[CEPin] := false  dira[CEPin] := falseDAT' //////////////////////Variable Array/////////////////////////////////////////////////////////////////////////////////////////IOPin                   byte 00 ' Default I/O pin.SCLKPin                 byte 01 ' Default SCLK pin.CEPin                   byte 03 ' Default CE pin.' /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{{/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  TERMS OF USE: MIT License///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the// Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}