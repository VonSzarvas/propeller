''8-Bit Game Graphics tile driver'' JT Cook''CON   X_Length = 32 ''number of tiles that run horizontally across screen  Y_Length = 24 ''number of tiles that run vertically across screen   ' constants  Empty_Tile = 32   ''value for empty background in game field  Font_offset = 119  ''where font starts  ' constants  SCANLINE_BUFFER = $7F00            request_scanline     = SCANLINE_BUFFER-4  'address of scanline buffer for TV driver  tilemap_adr          = SCANLINE_BUFFER-8  'address of tile map  tile_adr             = SCANLINE_BUFFER-12 'address of tiles  border_color         = SCANLINE_BUFFER-16 'address of border color  x_tiles = 16 '*16=240  y_tiles = 12 '*16=160OBJ   tv   : "JB_tv_02.spin"             ' tv driver 256 pixel scanline   gfx  : "JTC_Tile_Renderer.spin"    ' graphics engineVAR   byte Tile_Map[X_Length*Y_Length] ''tile map      long cog_number ''used for rendering engine   long cog_total  ''used for rendering engine      'long border_color ''used for borders''used for TV driver   long tv_status      '0/1/2 = off/visible/invisible           read-only   long tv_enable      '0/? = off/on                            write-only   long tv_pins        '%ppmmm = pins                           write-only   long tv_mode        '%ccinp = chroma,interlace,ntsc/pal,swap write-only   long tv_screen      'pointer to screen (words)               write-only   long tv_colors      'pointer to colors (longs)               write-only                  long tv_hc          'horizontal cells                        write-only   long tv_vc          'vertical cells                          write-only   long tv_hx          'horizontal cell expansion               write-only   long tv_vx          'vertical cell expansion                 write-only   long tv_ho          'horizontal offset                       write-only   long tv_vo          'vertical offset                         write-only   long tv_broadcast   'broadcast frequency (Hz)                write-only   long tv_auralcog    'aural fm cog                            write-only''used to stop and start tv driver   byte colorTable[16]   PUB tv_start  tv.start( @tvparams )  PUB tv_stop   tv.stop   PUB start( video_pins, NorP, fg_c, bg_c ) | i    DIRA[0] := 1    outa[0] := 0        long[tile_adr]     := @TileFile  ''grab address of tile graphics    long[tilemap_adr]  := @Tile_Map  ''address of tile map    long[@tvparams+8]  := video_pins ''map pins for video out    long[@tvparams+12] := NorP       ''NTSC or PAL           cog_total := 2    cog_number := 0         repeat      gfx.start( @cog_number )      repeat 10000 ' Allow some time for previous cog to boot up before setting 'cog_number' again      cog_number++    until cog_number == cog_total         colors_setup    set_characters( fg_c, bg_c )    set_border_color( 0 )        tv.start( @tvparams )    '' ----------------------------------------------------------------------------------  PUB colors_setup    colorTable[$0] := %0000_0_010 ' Background    colorTable[$1] := %0000_0_010 ' Black    colorTable[$2] := %0110_1_100 ' Medium Green    colorTable[$3] := %0110_1_101 ' Light Green    colorTable[$4] := %0001_1_010 ' Dark Blue    colorTable[$5] := %0010_1_100 ' Light Blue    colorTable[$6] := %1011_1_010 ' Dark Red    colorTable[$7] := %0100_1_101 ' Cyan    colorTable[$8] := %1011_1_011 ' Medium Red    colorTable[$9] := %1011_1_100 ' Light Red    colorTable[$a] := %1001_1_011 ' Dark Yellow    colorTable[$b] := %1010_1_101 ' Light Yellow    colorTable[$c] := %0110_1_011 ' Dark Green                   colorTable[$d] := %1110_1_100 ' Magenta    colorTable[$e] := %0000_0_101 ' Grey    colorTable[$f] := %0000_0_110 ' White'' ----------------------------------------------------------------------------------    PUB set_border_color( bcolor ) | i    long[border_color] :=  colorTable[bcolor]'' ----------------------------------------------------------------------------------  PUB set_characters ( fc, bc ) | n    repeat n from 0 to 90      convert_tile( @Char_data, n + Font_offset - 2, n, fc, bc )'' ----------------------------------------------------------------------------------        PUB place_tile_xy(x_location, y_location, tile)   '' Place a tile in the tilemap   ''x_location - select x position of tile   ''y_location - select y position of tile   ''tile - which tile will occupy location      y_location <<= 5       '' multiply by 32 since there are 32 tiles per row   x_location += y_location ''get final address   Tile_Map[x_location] := tile      '' **********************************************************************************  '' TERM ROUTINES ********************************************************************'' **********************************************************************************PUB clr_screen ( tl ) | n, y_location, x_location    wr_line( tl, 0, 23 )'' ----------------------------------------------------------------------------------  PUB print_string( x, y, adr ) | n, text_adr    n := 0    text_adr := adr    repeat until byte[text_adr + n] == 0      place_tile_xy( x + n, y, byte[text_adr + n] + Font_offset -34 ) ''write characer      n++'' ----------------------------------------------------------------------------------PUB erase_at( x, y, num, t ) | n     n := 0    repeat num      place_tile_xy( x + n, y, t ) ''write "space"      n++      '' ----------------------------------------------------------------------------------PUB erase_area( x, y, w, h, t ) | ix, iy     repeat iy from y to y + h - 1      repeat ix from x to x + w - 1        place_tile_xy( ix, iy, t ) ''write "space"               PUB del_line ( Yfrom, numLines ) | i, ii    repeat i from Yfrom to Yfrom + numLines      repeat ii from 0 to 41        place_tile_xy( ii, i, 32 + Font_offset -34 ) ''write "space"        '' ----------------------------------------------------------------------------------PUB wr_line ( t, Yfrom, numLines ) | i, ii    repeat i from Yfrom to Yfrom + numLines      repeat ii from 0 to 41        place_tile_xy( ii, i, t )         '' ---------------------------------------------------------------------------------- PUB convert_tile( char_adr, bit_8_tile, bit_1_tile, fg_color, bg_color ) | x,y,n, bit1, bit8_adr,bit1_adr, til_adr'' Convert a 1 bit tile to an 8 bit tile'' Convert_Tile(address of 1 bit character table, 8 bit tile location to be decoded to,1 bit tile to decode, background color, foreground color)   bit8_adr := bit_8_tile << 6 ''grab tile address   bit1_adr := bit_1_tile << 3 ''grab tile address   til_adr  := long[tile_adr] ''address of tile graphics        repeat y from 0 to 7    bit1 := Byte[char_adr + y + bit1_adr] ''grab bit row for 1 bit tile    bit1 <-= 24 ''working with longs    repeat x from 0 to 7     bit1<-=1  ''shift to ready current bit/pixel     n:=bit1&1 ''grab bit     if(n==1)       Byte[til_adr+bit8_adr] := colorTable[fg_color]     else       Byte[til_adr+bit8_adr] := colorTable[bg_color]     bit8_adr++ DAT  ''tile graphicsTileFile file "tile.dat"Char_Data 'enter, special characters   byte 0,0,0,0,0,0,0,0 ' Enter/Clear - 32              byte 24,24,24,24,0,0,24,0 ' ! - 33byte 102,102,102,0,0,0,0,0 ' " - 34byte 102,102,255,102,255,102,102,0 ' # - 35byte 24,62,96,60,6,124,24,0 '$ - 36byte 98,102,12,24,48,102,70,0' % - 37byte 60,102,60,56,103,102,63,0 ' & - 38byte 6,12,24,0,0,0,0,0 ' ' - 39              byte 12,24,48,48,48,24,12,0 ' ( - 40byte 48,24,12,12,12,24,48,0 ' ) - 41byte 0,102,60,255,60,102,0,0 ' * - 42byte 0, 24,24,126,24,24,0,0 ' +  - 43byte 0,0,0,0,0,24,24,48 ' ,  44byte 0,0,0,126,0,0,0,0 ' - - 45byte 0,0,0,0,0,24,24,0 ' . - 46              byte 0,3,6,12,24,48,96,0 ' / - 47'Numbers 0-9byte 60,102,110,118,102,102,60,0 ' 0 - 48byte 24,24,56,24,24,24,126,0 ' 1 - 49byte 60,102,6,12,48,96,126,0 ' 2 - 50byte 60,102,6,28,6,102,60,0 ' 3 - 51byte 6,14,22,102,127,6,6,0 ' 4 - 52byte 126,96,124,6,6,102,60,0 ' 5 - 53              byte 60,102,96,124,102,102,60,0 ' 6 - 54byte 126,102,12,12,12,12,12,0 ' 7 - 55byte 60,102,102,60,102,102,60,0 ' 8 - 56byte 60,102,102,62,6,102,60,0 ' 9 - 57'special charactersbyte 0,0,24,0,0,24,0,0 ' : - 58byte 0,0,24,0,0,24,24,48 ' ; - 59byte 14,24,48,96,48,24,14,0 ' < - 60byte 0,0,126,0,126,0,0,0 ' = - 61byte 112,24,12,6,12,24,112,0 ' > - 62byte 60,102,6,12,24,0,24,0 ' ? - 63byte 60,102,110,110,96,98,60,0 ' @ - 64'A-Z upper casebyte 24,60,102,126,102,102,102,0 ' A - 65byte 124,102,102,124,102,102,124,0 ' B - 66byte 60,102,96,96,96,102,60,0 ' C - 67byte 120,108,102,102,102,108,120,0 ' D - 68byte 126,96,96,120,96,96,126,0 ' E - 69byte 126,96,96,120,96,96,96,0 ' F - 70byte 60,102,96,110,102,102,60,0 ' G - 71byte 102,102,102,126,102,102,102,0 ' H - 72byte 60,24,24,24,24,24,60,0 'I - 73byte 30,12,12,12,12,108,56,0 ' J - 74byte 102,108,120,112,120,108,102,0 ' K - 75byte 96,96,96,96,96,96,126,0 ' L - 76byte 99,119,127,107,99,99,99,0 ' M - 77byte 102,118,126,110,102,102,102,0 ' N - 78byte 60,102,102,102,102,102,60,0 ' O - 79byte 124,102,102,124,96,96,96,0 ' P - 80byte 60,102,102,102,102,102,60,14 ' Q - 81byte 124,102,102,124,120,108,102,0 ' R - 82byte 60,102,96,60,6,102,60,0 ' S - 83byte 126,24,24,24,24,24,24,0 ' T - 84byte 102,102,102,102,102,102,60,0 ' U - 85byte 102,102,102,102,102,60,24,0 ' V - 86byte 99,99,99,107,127,119,99,0 ' W - 87byte 102,102,60,24,60,102,102,0 ' X - 88byte 102,102,102,60,24,24,24,0 ' Y - 89byte 126,6,12,24,48,112,126,0 ' Z - 90'special charactersbyte 60,48,48,48,48,48,60,0 ' [ - 91byte 0,96,48,24,12,6,3,0 ' \ - 92byte 60,12,12,12,12,12,60,0 ' ] - 93byte 24,60,102,0,0,0,0,0 ' ^ - 94byte 0,0,0,0,0,0,255,0 ' _ - 95byte 96,48,24,0,0,0,0,0 ' ` - 96'a-z lower casebyte 0,0,60,6,62,102,62,0 'a - 97byte 0,96,96,124,102,102,124,0 ' b - 98byte 0,0,60,96,96,96,60,0 ' c - 99byte 0,6,6,62,102,102,62,0 ' d - 100byte 0,0,60,102,126,96,60,0 ' e - 101byte 0,14,24,62,24,24,24,0 ' f - 102byte 0,0,62,102,102,62,6,124 ' g - 103byte 0,96,96,124,102,102,102,0 ' h - 104byte 0,24,0,56,24,24,60,0 ' i -105byte 0,6,0,6,6,6,6,60 ' j -106byte 0,96,96,108,120,108,102,0 ' k - 107byte 0,56,24,24,24,24,60,0 ' l - 108byte 0,0,102,127,127,107,99,0 ' m - 109byte 0,0,124,102,102,102,102,0 ' n - 110byte 0,0,60,102,102,102,60,0 ' o - 111byte 0,0,124,102,102,124,96,96 ' p - 112byte 0,0,62,102,102,62,6,6 ' q - 113byte 0,0,124,102,96,96,96,0 ' r - 114byte 0,0,62,96,60,6,124,0 ' s - 115byte 0,24,126,24,24,24,14,0 ' t - 116byte 0,0,102,102,102,102,62,0 ' u - 117byte 0,0,102,102,102,60,24,0 ' v - 118byte 0,0,99,107,127,62,54,0 ' w - 119byte 0,0,102,60,24,60,102,0 ' x - 120byte 0,0,102,102,102,62,12,120' y - 121byte 0,0,126,12,24,48,126,0 ' z - 122    { 'SC 3000 character fontbyte $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $00, $20byte $00, $50, $50, $50, $00, $00, $00, $00, $00, $50, $50, $F8, $50, $F8, $50byte $50, $00, $20, $78, $A0, $70, $28, $F0, $20, $00, $C8, $C8, $10, $20, $40byte $98, $98, $00, $40, $A0, $A0, $40, $A8, $90, $68, $00, $20, $20, $40, $00byte $00, $00, $00, $00, $10, $20, $40, $40, $40, $20, $10, $00, $40, $20, $10byte $10, $10, $20, $40, $00, $20, $A8, $70, $20, $70, $A8, $20, $00, $00, $20byte $20, $F8, $20, $20, $00, $00, $00, $00, $00, $00, $30, $10, $20, $00, $00byte $00, $00, $78, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $30, $00byte $00, $08, $10, $20, $40, $80, $00, $00, $30, $48, $48, $48, $48, $48, $30byte $00, $20, $60, $20, $20, $20, $20, $70, $00, $70, $88, $08, $10, $20, $40byte $F8, $00, $70, $88, $08, $30, $08, $88, $70, $00, $30, $50, $90, $90, $F8byte $10, $10, $00, $F8, $80, $F0, $08, $08, $88, $70, $00, $70, $80, $80, $F0byte $88, $88, $70, $00, $F8, $88, $08, $10, $20, $20, $20, $00, $70, $88, $88byte $70, $88, $88, $70, $00, $70, $88, $88, $78, $08, $10, $60, $00, $00, $30byte $30, $00, $30, $30, $00, $00, $00, $30, $30, $00, $30, $10, $20, $00, $08byte $10, $20, $40, $20, $10, $08, $00, $00, $00, $78, $00, $78, $00, $00, $00byte $40, $20, $10, $08, $10, $20, $40, $00, $70, $88, $88, $10, $20, $00, $20byte $00, $70, $88, $08, $48, $A8, $A8, $70, $00, $20, $50, $88, $88, $F8, $88byte $88, $00, $F0, $48, $48, $70, $48, $48, $F0, $00, $70, $88, $80, $80, $80byte $88, $70, $00, $F0, $48, $48, $48, $48, $48, $F0, $00, $F8, $80, $80, $F0byte $80, $80, $F8, $00, $F8, $80, $80, $F0, $80, $80, $80, $00, $70, $88, $80byte $B8, $88, $88, $70, $00, $88, $88, $88, $F8, $88, $88, $88, $00, $70, $20byte $20, $20, $20, $20, $70, $00, $08, $08, $08, $08, $88, $88, $70, $00, $88byte $90, $A0, $C0, $A0, $90, $88, $00, $80, $80, $80, $80, $80, $80, $F8, $00byte $88, $D8, $A8, $A8, $88, $88, $88, $00, $88, $C8, $A8, $98, $88, $88, $88byte $00, $F8, $88, $88, $88, $88, $88, $F8, $00, $F0, $88, $88, $F0, $80, $80byte $80, $00, $70, $88, $88, $88, $A8, $90, $68, $00, $F0, $88, $88, $F0, $A0byte $90, $88, $00, $70, $88, $80, $70, $08, $88, $70, $00, $F8, $20, $20, $20byte $20, $20, $20, $00, $88, $88, $88, $88, $88, $88, $70, $00, $88, $88, $88byte $88, $88, $50, $20, $00, $88, $88, $88, $88, $A8, $A8, $50, $00, $88, $88byte $50, $20, $50, $88, $88, $00, $88, $88, $50, $20, $20, $20, $20, $00, $F8byte $08, $10, $20, $40, $80, $F8, $00, $38, $20, $20, $20, $20, $20, $38, $00byte $88, $50, $20, $70, $20, $70, $20, $00, $70, $10, $10, $10, $10, $10, $70byte $00, $20, $50, $88, $00, $00, $00, $00, $00, $00, $00, $08, $F0, $50, $50byte $90, $00, $40, $20, $10, $00, $00, $00, $00, $00, $00, $00, $70, $10, $70byte $90, $68, $00, $80, $80, $B0, $C8, $88, $C8, $B0, $00, $00, $00, $70, $88byte $80, $88, $70, $00, $08, $08, $68, $98, $88, $98, $68, $00, $00, $00, $70byte $88, $F8, $80, $70, $00, $18, $20, $20, $F8, $20, $20, $20, $00, $00, $00byte $68, $98, $88, $78, $08, $70, $80, $80, $B0, $C8, $88, $88, $88, $00, $20byte $00, $60, $20, $20, $20, $70, $00, $10, $00, $30, $10, $10, $10, $90, $60byte $80, $80, $88, $90, $A0, $D0, $88, $00, $60, $20, $20, $20, $20, $20, $70byte $00, $00, $00, $D0, $A8, $A8, $A8, $A8, $00, $00, $00, $B0, $C8, $88, $88byte $88, $00, $00, $00, $70, $88, $88, $88, $70, $00, $00, $00, $70, $48, $48byte $70, $40, $40, $00, $00, $38, $48, $48, $38, $08, $08, $00, $00, $B0, $C8byte $80, $80, $80, $00, $00, $00, $78, $80, $70, $08, $F0, $00, $20, $20, $F8byte $20, $20, $20, $18, $00, $00, $00, $88, $88, $88, $98, $68, $00, $00, $00byte $88, $88, $88, $50, $20, $00, $00, $00, $88, $A8, $A8, $A8, $50, $00, $00byte $00, $88, $50, $20, $50, $88, $00, $00, $00, $88, $88, $98, $68, $08, $70byte $00, $00, $F8, $10, $20, $40, $F8, $00, $18, $20, $20, $40, $20, $20, $18byte $00, $20, $20, $20, $00, $20, $20, $20, $00, $C0, $20, $20, $10, $20, $20byte $C0, $00, $00, $00, $40, $A8, $10, $00, $00, $00, $00, $00, $00, $00, $00byte $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $FCbyte $00, $00, $00, $00, $20, $20, $20, $FC, $00, $00, $00, $00, $00, $00, $00byte $FC, $20, $20, $20, $20, $20, $20, $20, $E0, $20, $20, $20, $20, $20, $20byte $20, $3C, $20, $20, $20, $20, $00, $00, $00, $3C, $20, $20, $20, $20, $20byte $20, $20, $3C, $00, $00, $00, $00, $00, $00, $00, $E0, $20, $20, $20, $20byte $20, $20, $20, $E0, $00, $00, $00, $00, $00, $00, $00, $0C, $10, $20, $20byte $20, $20, $20, $10, $0C, $00, $00, $00, $00, $00, $00, $00, $80, $40, $20byte $20, $20, $20, $20, $40, $80, $00, $00, $00, $00, $20, $70, $A8, $20, $20byte $20, $20, $00, $00, $20, $40, $F8, $40, $20, $00, $00, $A8, $54, $A8, $54byte $A8, $54, $A8, $54, $84, $88, $50, $30, $30, $28, $44, $84, $20, $20, $20byte $FC, $20, $20, $20, $20, $04, $08, $10, $10, $20, $20, $40, $80, $80, $40byte $20, $20, $10, $10, $08, $04, $04, $0C, $1C, $1C, $3C, $3C, $7C, $FC, $80byte $C0, $E0, $E0, $F0, $F0, $F8, $FC, $FC, $7C, $3C, $3C, $1C, $1C, $0C, $04byte $FC, $F8, $F0, $F0, $E0, $E0, $C0, $80, $00, $00, $00, $00, $00, $00, $00byte $FC, $00, $00, $00, $00, $00, $00, $FC, $FC, $00, $00, $00, $00, $FC, $FCbyte $FC, $FC, $FC, $FC, $FC, $FC, $00, $00, $00, $00, $FC, $FC, $00, $00, $00byte $00, $00, $00, $FC, $00, $00, $00, $00, $00, $00, $00, $80, $80, $80, $80byte $80, $80, $80, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00byte $00, $70, $50, $70, $00, $F0, $80, $80, $80, $00, $00, $00, $00, $00, $00byte $00, $08, $08, $08, $78, $00, $00, $00, $00, $00, $20, $10, $08, $00, $00byte $00, $00, $30, $30, $00, $00, $00, $00, $F8, $08, $F8, $08, $10, $60, $00byte $00, $00, $F0, $10, $60, $40, $80, $00, $00, $00, $08, $10, $20, $D0, $10byte $00, $00, $00, $20, $F8, $88, $10, $20, $00, $00, $00, $00, $F8, $20, $20byte $F8, $00, $00, $00, $10, $F8, $30, $50, $90, $00, $00, $00, $40, $F8, $48byte $50, $40, $00, $00, $00, $00, $70, $10, $10, $F8, $00, $00, $00, $78, $08byte $78, $08, $78, $00, $00, $00, $00, $A8, $A8, $08, $30, $00, $00, $00, $00byte $78, $00, $00, $00, $00, $F8, $08, $28, $30, $20, $20, $40, $00, $08, $10byte $20, $D0, $10, $10, $10, $00, $20, $F8, $88, $88, $08, $10, $60, $00, $00byte $F8, $20, $20, $20, $20, $F8, $00, $10, $F8, $10, $30, $50, $90, $30, $00byte $40, $F8, $48, $48, $48, $48, $90, $00, $20, $F8, $20, $F8, $20, $20, $20byte $00, $00, $78, $48, $88, $08, $10, $60, $00, $40, $78, $90, $10, $10, $20byte $40, $00, $00, $F8, $08, $08, $08, $08, $F8, $00, $50, $F8, $50, $50, $10byte $10, $20, $00, $00, $C0, $08, $C8, $08, $10, $60, $00, $00, $F8, $08, $10byte $20, $50, $88, $00, $40, $F8, $48, $50, $40, $40, $38, $00, $00, $88, $88byte $48, $08, $10, $60, $00, $78, $48, $48, $A8, $18, $10, $60, $00, $10, $E0byte $20, $F8, $20, $20, $40, $00, $00, $A8, $A8, $A8, $08, $10, $60, $00, $70byte $00, $F8, $20, $20, $20, $40, $00, $20, $20, $20, $30, $28, $20, $20, $00byte $20, $20, $F8, $20, $20, $20, $40, $00, $00, $70, $00, $00, $00, $00, $F8byte $00, $00, $F8, $08, $50, $20, $50, $80, $00, $20, $F8, $10, $20, $70, $A8byte $20, $00, $00, $08, $08, $08, $10, $20, $C0, $00, $00, $20, $10, $88, $88byte $88, $88, $00, $80, $80, $F8, $80, $80, $80, $78, $00, $00, $F8, $08, $08byte $08, $10, $60, $00, $00, $40, $A0, $10, $08, $08, $00, $00, $20, $F8, $20byte $20, $A8, $A8, $20, $00, $F8, $08, $08, $08, $50, $20, $10, $00, $60, $10byte $60, $10, $E0, $10, $08, $00, $20, $40, $80, $90, $88, $F8, $08, $00, $00byte $08, $08, $50, $20, $50, $80, $00, $00, $F0, $40, $F8, $40, $40, $38, $00byte $40, $40, $F8, $48, $50, $40, $40, $00, $00, $70, $10, $10, $10, $10, $F8byte $00, $00, $F8, $08, $F8, $08, $08, $F8, $00, $70, $00, $F8, $08, $08, $10byte $20, $00, $48, $48, $48, $48, $08, $10, $20, $00, $20, $A0, $A0, $A0, $A8byte $A8, $B0, $00, $80, $80, $80, $88, $88, $90, $E0, $00, $00, $F8, $88, $88byte $88, $88, $F8, $00, $00, $F8, $88, $88, $08, $10, $20, $00, $00, $C0, $00byte $08, $08, $10, $E0, $00, $20, $90, $40, $00, $00, $00, $00, $00, $40, $A0byte $40, $00, $00, $00, $00, $00, $C0, $C0, $C0, $C0, $C0, $C0, $C0, $C0, $E0byte $E0, $E0, $E0, $E0, $E0, $E0, $E0, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1Cbyte $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $04, $04, $04, $04, $04, $04, $04byte $04, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $70, $70, $70, $70, $70, $70byte $70, $70, $00, $00, $FC, $FC, $FC, $00, $00, $00, $20, $50, $20, $50, $20byte $50, $20, $50, $00, $00, $A8, $54, $A8, $00, $00, $00, $1C, $1C, $1C, $1Cbyte $E0, $E0, $E0, $E0, $00, $70, $88, $88, $88, $70, $00, $00, $00, $70, $F8byte $F8, $F8, $70, $00, $00, $40, $F8, $10, $78, $90, $F8, $10, $00, $78, $48byte $78, $48, $78, $48, $88, $00, $78, $48, $48, $78, $48, $48, $78, $00, $20byte $A8, $A8, $20, $20, $50, $88, $00, $20, $28, $F0, $70, $70, $A8, $20, $00byte $20, $F8, $20, $70, $A8, $20, $20, $00, $20, $50, $F8, $20, $70, $A8, $F8byte $00, $00, $20, $20, $70, $20, $20, $F8, $00, $20, $70, $F8, $F8, $F8, $20byte $70, $00, $50, $F8, $F8, $F8, $F8, $70, $20, $00, $20, $20, $70, $F8, $70byte $20, $20, $00, $70, $70, $A8, $F8, $A8, $20, $70, $00, $78, $FC, $B4, $B4byte $FC, $CC, $78, $00, $00, $20, $70, $A8, $F8, $50, $00, $00, $88, $F8, $A8byte $20, $A8, $F8, $88, $00, $00, $DC, $48, $78, $48, $DC, $00, $00, $70, $70byte $20, $F8, $20, $20, $50, $00, $00, $20, $00, $F8, $00, $20, $00, $00, $00}tvparams  long  0                               'status          long  1                               'enable          long  %011_0000                       'pins ' PROTO/DEMO BOARD = %001_0101 ' HYDRA = %011_0000          long  0                               'mode - default to NTSC          long  x_tiles                         'hc          long  y_tiles                         'vc          long  10                              'hx          long  1                               'vx          long  0                               'ho          long  0                               'vo          long  50_000_000   '_xinfreq<<4       'broadcast          long  0                               'auralcog          long  SCANLINE_BUFFER          long  border_color                    'pointer to border colour          long  request_scanlinedisp_ptr  long  0VSync     long  0          nextline  long  0                                    