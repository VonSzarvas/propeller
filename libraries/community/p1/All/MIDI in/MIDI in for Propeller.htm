<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>MIDI in object for Propeller</title></head><body><h2>MIDI in object for Propeller</h2><p>The MidiIn object is a Propeller object which reads a MIDI data stream, parses the MIDI commands, and returns the MIDI events to the user for further processing. The code is based on my understanding of the MIDI spec as documented by the very useful web site <a href="http://www.borg.com/~jglatt/tech/midispec.htm">The MIDI Spec</a>. Although I have tried very hard to make sure that I'm handling the MIDI data correctly, it is quite possible that there are still errors. If you find any, please let me know so that I can fix them!</p><h3>Limitations</h3><ul>  <li>SYSEX messages are not handled well (actually they are barely handled at all) in this version. I'm open to suggestions as to the best way to handle SYSEX data.</li>  <li>MTC (Midi Time Code) Messages are just passed along in their raw form. If you'd like to see me parsing them and passing back more refined data, talk to me. My project does not need MTC, so I'm not sure what would be useful.</li>  <li>I only have a 16 slot event buffer, with no provision for handling buffer overflow. You'll need to make sure you are retrieving the events fast enough to prevent overflow. </li></ul><h3>Overview</h3><p>The MidiIn object runs in its own cog, passing desired MIDI events back through a simple SPIN interface. When you start the MidiIn object (using the <strong>start</strong> method) you pass two parameters, the I/O pin that the MIDI in stream will be connected to, and a word containing bit flags indicating what MIDI events you want to see. You then use the <strong>evtCheck</strong>, <strong>evtTime</strong>, and/or <strong>evt</strong> methods to retrieve MIDI events. These three methods all do the same thing - return one word containing a MIDI event. <strong>evtCheck</strong> will always return immediately, returning -1 if there is no MIDI event available. <strong>evtTime</strong> will wait for a user specified time for a MIDI event, and <strong>evt</strong> will wait with no limit for a MIDI event. </p><p>Although the code may appear rather voluminous, the actual code paths are very short, and there is no problem keeping up with a standard MIDI input stream. I have commented the code - probably to excess - so that it should be fairly easy to follow aand modify if you want to. </p><h3>MIDI Event Flags</h3><p>When you start up the MidiIn object, you pass a word containing bit flags indicating what events you would like to see. Here is a fragment of spin code to put in your <strong>CON</strong> section defining the available flags:</p><pre>  doNoteOn            = $00000001<br>  doNoteOff           = $00000002<br>  doAftertouch        = $00000004<br>  doController        = $00000008<br>  doProgramChange     = $00000010<br>  doChannelPressure   = $00000020<br>  doPitchWheel        = $00000040<br>  doSysex             = $00000100<br>  doMTC               = $00000200<br>  doSongPosPtr        = $00000400<br>  doSongSelect        = $00000800<br>  doTuneRequest       = $00001000<br>  doMidiClock         = $00002000<br>  doMidiTick          = $00004000<br>  doMidiStart         = $00008000<br>  doMidiContinue      = $00010000<br>  doMidiStop          = $00020000<br>  doActiveSense       = $00040000<br>  doReset             = $00080000 </pre><p>Since these are bit flags, you can just add them together to get the word to be passed to MidiIn. So if you only want to see the Note On and Note Off events, you would start up the MidiIn object with:</p><pre>  midiIn.start(midiPin, doNoteOn+doNoteOff) </pre><h3>MIDI Events</h3><p>Each MIDI event is returned as one word, according to the layouts in the table below. The values for Pitch Wheel and Song Position MIDI events are sent in a MIDI stream as two bytes, each containing 7 bits. MidiIn combines these correctly and returns the value as a halfword. </p><table width="80%"  border="1">  <tr>    <th scope="col">&nbsp;</th>    <th scope="col">Byte 3 </th>    <th scope="col">Byte 2</th>    <th scope="col">Byte 1 </th>    <th scope="col">Byte 0 </th>  </tr>  <tr>    <th scope="row">Note On </th>    <td><div align="center">$00</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">note</div></td>    <td><div align="center">velocity</div></td>  </tr>  <tr>    <th scope="row"><p>Note Off</p>    </th>    <td><div align="center">$01</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">note</div></td>    <td><div align="center">velocity</div></td>  </tr>  <tr>    <th scope="row">Aftertouch</th>    <td><div align="center">$02</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">note</div></td>    <td><div align="center">velocity</div></td>  </tr>  <tr>    <th scope="row">Controller</th>    <td><div align="center">$03</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">controller number </div></td>    <td><div align="center">controller value </div></td>  </tr>  <tr>    <th scope="row">Program Change</th>    <td><div align="center">$04</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">program number </div></td>  </tr>  <tr>    <th scope="row">Channel Pressure </th>    <td><div align="center">$05</div></td>    <td><div align="center">channel</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">channel pressure </div></td>  </tr>  <tr>    <th scope="row">Pitch Wheel</th>    <td><div align="center">$06</div></td>    <td><div align="center">channel</div></td>    <td colspan="2"><div align="center">pitch wheel value </div></td>  </tr>  <tr>    <th scope="row">SysEx</th>    <td><div align="center">$07</div></td>    <td><div align="center">sysex length </div></td>    <td colspan="2"><div align="center"></div>          <div align="center">sysex buffer address </div></td>  </tr>  <tr>    <th scope="row">Midi Time Code (MTC) </th>    <td><div align="center">$08</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">MTC value </div></td>  </tr>  <tr>    <th scope="row">Song Position</th>    <td><div align="center">$09</div></td>    <td><div align="center">$00</div></td>    <td colspan="2"><div align="center">song position value </div></td>  </tr>  <tr>    <th scope="row">Song Select</th>    <td><div align="center">$0A</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">song select value </div></td>  </tr>  <tr>    <th scope="row">Tune Request </th>    <td><div align="center">$0B</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Midi Clock </th>    <td><div align="center">$0C</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Midi Tick </th>    <td><div align="center">$0D</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Midi Start</th>    <td><div align="center">$0E</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Midi Continue </th>    <td><div align="center">$0F</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Midi Stop</th>    <td><div align="center">$10</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Active Sense </th>    <td><div align="center">$11</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr>  <tr>    <th scope="row">Reset</th>    <td><div align="center">$12</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>    <td><div align="center">$00</div></td>  </tr></table><h3>Hardware</h3><p>Interfacing MIDI to the Propeller is quite easy, requiring only three resistors, one diode, and an opto-isolator. My implementation is shown in the circuit below, which is in turn based on <a href="http://www.borg.com/~jglatt/tech/midispec/hardware.htm">this circuit</a>. I'm pretty sure that you could reduce the 5v connection to the opto-isolator to 3.3v and eliminate the 1K resistor, but I have not tried that. </p><p><img src="midi.jpg" width="511" height="186"></p><h3>About My Project</h3><p>This object was created as part of my project to equip my Austin Pipe Organ to play from a MIDI stream. I acquired the organ about twenty years ago, when the church that owned it decided to replace it with an electronic organ after the pipe organ was damaged in a flood. I worked with a close friend to build a MIDI controller for it based on the 8051 micro-computer. I etched my own circuit boards and we actually got it all working - one of the first MIDI capable pipe organs in the world. But the system did not age well, and was difficult to impossible to modify. Several years ago the organ stopped playing. I had been looking at several possibilitiesfor building a new controller - the Javelin chip from Parallax looked very promising (I was a Java programmer at work), until I found that it could not deal with the 31.25KB baud rate of MIDI. The SX processors could have done the job, and I was starting to look into them when the Propeller chip was announced. The organ now plays from my breadboard implementation, and I should have my ProtoBoard version up and running very soon.</p><p>Tom Dimock<br>  tad1@cornell.edu  <br>6/4/2007  </p></body></html>