'' ******************************************************************************'' * MCP23008 i2c Bus Expander Object                                           *'' * Ron Czapala April 2014 - based on MCP23016 object by                       *'' * James Burrows May 2006                                                     *'' * Version 1.0                                                                *'' ******************************************************************************'''' MCP23008 i2c I/O expander object.'''' this object uses the following sub OBJECTS:''  -> i2cObject'''' Revision History:''  -> V1    - Release'' '' The default address is %0100_0000CON  ' MCP constants  _MCP23008_IODIR   = $00       'I/O DIRECTION                    1 = Pin is configured as an input or 0 = Pin is configured as an output  _MCP23008_IPOL    = $01       'INPUT POLARITY                   1 = GPIO register bit will reflect the opposite logic state of the input pin or 0 = same logic state of the input pin  _MCP23008_GPINTEN = $02       'INTERRUPT-ON-CHANGE CONTOL              _MCP23008_DEFVAL  = $03       'DEFAULT COMPARE FOR INTERRUPT-ONCHANGE  _MCP23008_INTCON  = $04       'INTERRUPT CONTROL  _MCP23008_IOCON   = $05       'CONFIGURATION  _MCP23008_GPPU    = $06       'PULL-UP RESISTOR CONFIGURATION   1 = Pull-up enabled or 0 = Pull-up disabled  _MCP23008_INTF    = $07       'INTERRUPT FLAG                   1 = Pin caused interrupt or 0 = Interrupt not pending  _MCP23008_INTCAP  = $08       'INTERRUPT CAPTURE                1 = Logic-high or 0 = Logic-low  _MCP23008_GPIO    = $09       'PORT REGISTER                    1 = Logic-high or 0 = Logic-low  _MCP23008_OLAT    = $0A       'OUTPUT LATCH                     1 = Logic-high or 0 = Logic-lowVAR  long  mcp23008_Address  long  started    OBJ  i2cObject     : "i2cObject"  PUB Init(_deviceAddress,_i2cSDA,_i2cSCL,_driveSCLLine): okay  ' init the Object  mcp23008_Address := _deviceAddress  i2cObject.init(_i2cSDA,_i2cSCL,_driveSCLLine)  'start  okay := start  return okayPUB start : okay  ' try a restart  if started == false    if i2cObject.devicePresent(mcp23008_Address) == true      started := true    else      started := false  return startedPUB isStarted : result  ' return the started state  return started    PUB WriteReg(register, i2cData) : ackbit  if started == true     ackbit := i2cObject.WriteLocation(mcp23008_Address, register,i2cData,8,8)    return ackbitPUB ReadReg(register)  : i2cData  if started == true    i2cData := i2cObject.readLocation(mcp23008_Address, register, 8, 8)    return i2cDataDAT{{  Terms of Use: MIT License  Permission is hereby granted, free of charge, to any person obtaining a copy of this  software and associated documentation files (the "Software"), to deal in the Software  without restriction, including without limitation the rights to use, copy, modify,  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to  permit persons to whom the Software is furnished to do so, subject to the following  conditions:  The above copyright notice and this permission notice shall be included in all copies  or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. }}       