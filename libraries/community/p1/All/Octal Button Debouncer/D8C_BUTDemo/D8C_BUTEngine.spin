{{///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// D8C Button Engine//// Author: Kwabena W. Agyeman// Updated: 8/22/2010// Designed For: P8X32A// Version: 1.1//// Copyright (c) 2010 Kwabena W. Agyeman// See end of file for terms of use.//// Update History://// v1.0 - Original release - 2/28/2010.// v1.1 - Added support for variable pin assignments - 8/22/2010.//// For each included copy of this object only one spin interpreter should access it at a time.//// Nyamekye,//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Debouncing Circuit:////     0   1   2   3 Pin Group////                    3.3V//                     |//                     --- Switch Contact +//// Pin 0,  8, 16, 24 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 1,  9, 17, 25 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 2, 10, 18, 26 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 3, 11, 19, 27 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 4, 12, 20, 28 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 5, 13, 21, 29 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 6, 14, 22, 30 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND////                    3.3V//                     |//                     --- Switch Contact +//// Pin 7, 15, 23, 31 ----- Switch Contact -//                     |//                     R 10KOHM//                     |//                    GND///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}VAR  long cogNumber, lockNumber, pinGroupNumber, stack[9], buttonTimes[8]  byte buttonAccumulators[8], buttonStates[8], buttonsPressed[8], buttonsReleased[8]PUB buttonState(buttonNumber) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns the current debounced button state on an I/O pin.'' //'' // The I/O pin must settle at one state for 80 milliseconds to register. This is the debouncing time.'' //'' // ButtonNumber - The pin number the button is attached to in the pin group. Between 0 and 7.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  result or= buttonStates[(buttonNumber <# 7) #> 0]PUB buttonPressed(buttonNumber) '' 7 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns true if a debounced button on the selected I/O pin was pressed.'' //'' // The I/O pin must settle at one state for 80 milliseconds to register. This is the debouncing time.'' //'' // ButtonNumber - The pin number the button is attached to in the pin group. Between 0 and 7.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  setLock  result or=  buttonsPressed[(buttonNumber <# 7) #> 0]~  clearLockPUB buttonReleased(buttonNumber) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns true if a debounced button on the selected I/O pin was released.'' //'' // The I/O pin must settle at one state for 80 milliseconds to register. This is the debouncing time.'' //'' // ButtonNumber - The pin number the button is attached to in the pin group. Between 0 and 7.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  setLock  result or=  buttonsReleased[(buttonNumber <# 7) #> 0]~  clearLockPUB buttonTime(buttonNumber) '' 4 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Returns how long a debounced button has been in its current state on an I/O pin in centiseconds.'' //'' // The I/O pin must settle at one state for 80 milliseconds to register. This is the debouncing time.'' //'' // ButtonNumber - The pin number the button is attached to in the pin group. Between 0 and 7.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  return buttonTimes[(buttonNumber <# 7) #> 0]PUB BUTEngineStart(pinGroup) '' 7 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Starts up the BUT driver running on a cog.'' //'' // Returns true on success and false on failure.'' //'' // PinGroup - Pin group to use for the debouncing circuit. Between 0 and 3.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  BUTEngineStop  pinGroupNumber := (((pinGroup <# 3) #> 0) * 8)  lockNumber := locknew  cogNumber := cognew(BUTDriver, @stack[0])  if((++lockNumber) and (++cogNumber) and (chipver == 1))    return true  BUTEngineStopPUB BUTEngineStop '' 3 Stack Longs'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'' // Shuts down the BUT driver running on a cog.'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  if(cogNumber)    cogstop(-1 + cogNumber~)  if(lockNumber)    lockret(-1 + lockNumber~)PRI setLock ' 3 Stack Longs  repeat while(lockset(lockNumber - 1))PRI clearLock ' 3 Stack Longs  lockclr(lockNumber - 1)PRI BUTDriver : buffer | counter ' 9 Stack Longs  buffer := cnt  repeat    buffer += (clkfreq / 100)    waitcnt(buffer)    repeat counter from 0 to 7      buttonAccumulators[counter] += (buttonAccumulators[counter] + ina[pinGroupNumber + counter])      setLock      ifnot((buttonAccumulators[counter] <> $FF) or buttonStates[counter])        buttonTimes[counter] := 0        buttonStates[counter] := true        buttonsPressed[counter] := true      if((not(buttonAccumulators[counter])) and buttonStates[counter])        buttonTimes[counter] := buttonStates[counter] := 0        buttonsReleased[counter] := true      if(buttonTimes[counter] < posx)        buttonTimes[counter] += 1      clearLock{{/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  TERMS OF USE: MIT License///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the// Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}}