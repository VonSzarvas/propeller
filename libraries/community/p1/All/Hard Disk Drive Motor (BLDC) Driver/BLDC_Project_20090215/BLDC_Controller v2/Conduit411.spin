{{******************************************************** ViewPort Conduit                                v4.1 ** Share Propeller Memory with the ViewPort Application ** (C) 2008 myDanceBot.com, Inc.                        *********************************************************Use this Object to share memory with the ViewPort Application.Once memory is shared, the value of a variable can be viewed and changed while theprogram is running.  Data from other objects can be displayed and their behaviorcontrolled from ViewPort's graphical interface._______________________Features:*Transfers data at up to 2Mbps Full-Duplex over a Parallax USB-Serial connection or 115kbps over other Serial connections.*Manages configuration of variables and registration of ViewPort objects*Automatically switches between 2Mbps, 1Mbps and 115kbps depending on ViewPort setting_______________________Use:-Set clock rate to 80MHz:        CON         _clkmode        = xtal1 + pll16x         _xinfreq        = 5_000_000-Include this object in your program:        Obj vp:"Conduit"-Use these ViewPort Functions  Share(@varA,@varC)            Share memory from varA to varC with ViewPort. This lets you                                monitor&change them.  You MUST use this function- at the start of your                                program, but AFTER "register" and "config" statements have run.  Register(component,cfg)       Register other components (fuzzy logic, video, quicksample..)  Config(cfgstring)             Configure ViewPort.  Can be generated by ViewPort.}}CON  _clkmode = xtal1 + pll16x  _xinfreq = 5_000_000  TXPIN=|<30    RXPIN=|<31  DBGLEN=6PUB debug(dP1,dP2){{ Used by ViewPort debugger}}  dbgPtr:=dP1   dbPtr:=dP2  PUB share(firstVarPtr,lastVarPtr){{Share memory from varA to varC with ViewPort. This lets youmonitor&change them.  You MUST use this function- at the start of yourprogram, but AFTER "register" and "config" statements have run.  }}  if lastVarPtr    varLen:=(lastVarPtr-firstVarPtr+4)/4    varPtr:=firstVarPtr    txvar~  resyncP:=1200/4/(varlen+tvlen+qslen+fzlen)  if resyncP<2    resyncP:=1  resyncCnt:=resyncP  ''calculate timings  bittick10:=clkfreq/2_000_000              bittick15:=bittick10*3/2                 bitticks115k:=clkfreq/115_200  statusPtr:= @statusCtr  cognew(@entry, varPtr)  return @statusCtrpub config(sptr){{Configure ViewPort.  CfgString can be generated by ViewPort.}}   if not txstrPtr0    txStrPtr0:=sptr  elseif not txstrPtr1    txStrPtr1:=sptr  elseif not txstrPtr2    txStrPtr2:=sptr  elseif not txstrPtr3    txStrPtr3:=sptr  elseif not txstrPtr4    txStrPtr4:=sptr  elseif not txstrPtr5    txStrPtr5:=sptrpub register(mPtr)|mode,cfg{{Register other components (fuzzy logic, video, quicksample..)}}              mode:=mptr & 3  mPtr-=mode  cfg:=long[mPtr]  case mode    0:      case cfg        1..2:tvLen:=6000        3:tvLen:=6000+1        4:tvLen:=3000+1        OTHER: tvLen:=1500      tvPtr:=mptr      txtv~    1:'     (config>>16)==0       memPtr:=mPtr+8    2:          qsPtr:=mptr                    qscog:=cfg                     ncog:=long[mPtr+12]+1          sync:=mPtr+16      xtime:=sync+4      qsLen:=ncog*360+6      txqs~    3:         fzPtr:=mPtr      fzLen:=cfg/4      txfz~DAT{************************************* Assembly language conduit driver  **************************************}                        orgentry                        sub     tximask,#1                        sub     tximask,txmask                        mov     txcnt,hsec                        add     txcnt,cnt                                               waitcnt txcnt,#100                        or      dira,txmask                        or      outa,txmask                        jmp     #txcfgstrreceive                 or      outa,txmask                        mov     txcnt,cnt                         waitpeq rxmask,rxmask                        mov     t1,cnt                        sub     txcnt,t1                        neg     txcnt,txcnt                         cmp     txcnt,stopticks wc             if_c        jmp     #txErr                        waitpne rxmask,rxmask                        mov     rxcnt,cnt                        mov     t3,rxcnt't2-t3                        sub     t3,t1                         {t2 measures stopbit length.  if t2<80, 80mhz/2mbit=40cycles  stopbits is 2x bitticks  if you're running at a different frequency, change bitticks, stopticks and xtf  for example, if you're running at 96mhz, bitticks should be=48, stopticks=96}                        cmp     t3,bittick15 wc                            mov     t2,#19                   if_c        mov     bitticks,bittick10            if_c        mov     xt,xt2mb            if_c        jmp     #bit0                        mov     t1,bittick15                        shl     t1,#1                         cmp     t3,t1 wc                if_c        mov     bitticks,bittick10            if_c        shl     bitticks,#1             if_c        mov     xt,xt1mb            if_c        jmp     #bit0                                                 mov     bitticks,bitticks115k                        mov     xt,xt115k                        mov     t1,bitticks                        shr     t1,#1                        add     rxcnt,t1bit0                        mov     stopticks,bitticks                        shl     stopticks,#1                        add     rxcnt,bitticks                        add     rxcnt,#12bit                                                waitcnt rxcnt,bitticks                        test    rxmask,ina      wc                        rcr     t1,#1                            djnz    t2,#bit                                                mov     t3,#30 :bit3                   waitcnt rxcnt,bitticks                        test    rxmask,ina      wc                        rcr     t4,#1                        djnz    t3,#:bit3                        mov     t2,t1                        shr     t2,#32-19'19                        and     t2,#$FF                        cmp     t2,#254         wz,wc'docontrol on 254       if_nz_and_nc     jmp     #txErr                                shr     t1,#32-9'9                        and     t1,#$FF                        cmp     t1,#7           wc       if_nc_and_z      jmp     #txErr                       if_z      add     t1,#:docontrol              if_z      jmp     t1                                                                                                           cmp     t2,#250         wc              if_nc     sub     t2,#250              if_nc     mov     t3,qsPtr              if_nc     jmp     #:makeInt                        cmp     t2,#240         wc              if_nc     sub     t2,#240              if_nc     mov     t3,dbPtr              if_nc     jmp     #:makeInt                                      cmp     t2,#100         wc              if_nc     sub     t2,#100              if_nc     mov     t3,fzPtr              if_nc     jmp     #:makeInt                        mov     t3,varPtr :makeInt                        shl     t2,#2                         add     t2,t3                         mov     t3,t4                        shr     t3,#23                        and     t3,#$FF                        shl     t3,#24                        or      t1,t3                                                mov     t3,t4                        shr     t3,#13                        and     t3,#$FF                        shl     t3,#16                        or      t1,t3                                                mov     t3,t4                        shr     t3,#3                        and     t3,#$FF                        shl     t3,#8                        or      t1,t3                        wrlong  t1,t2                        jmp     #txData:docontrol              jmp     #txErr                           jmp     #txMem                           jmp     #txData                          jmp     #restart                         jmp     #txcfgStr                        jmp     #:leavebkpt'5: leave bkpt                        jmp     #txAll    :leavebkpt                        mov     t2,dbPtr                        add     t2,#4                             rdlong  t3,t2                             mov     t1,#0                        wrlong  t1,t2                             mov     rxcnt,cnt                        add     rxcnt,spinticks                        waitcnt rxcnt,bitticks                         wrlong  t3,t2                             wrlong  t1,dbPtr                          jmp     #txData  restart               mov     t1,cnt                        wrlong  t1,sync                        wrlong  xt,xtime                        mov     t1,qscog                           mov     t2,ncog  startC                coginit t1 nr                        add     t1,#1                          djnz    t2,#startCtxData                        mov     conduitstate,conduitstate2                        mov     txcnt,cnt                        add     txcnt,stopticks                        mov     rxcnt,#1                        call    #txhdrtxDtxMultB         txvar          jmp     #txqs                        mov     t2,varLen                        mov     t3,varPtr                        call    #txlongs         txqs           jmp     #txtv                                                      mov     t2,qsLen                        mov     t3,qsPtr                        call    #txlongs         txtv           jmp     #txfz                                                      mov     t2,tvLen                        mov     t3,tvPtr                        call    #txlongs                                 txfz           jmp     #txDDone                        mov     t2,fzLen                        mov     t3,fzPtr                        call    #txlongs                        txDDone                        rdlong  t1,statusPtr                        add     t1,#1                        wrlong  t1,statusPtrtxDataCon'                        jmp     #txMultB                                               djnz    resynccnt,#txMultB                        mov     resynccnt,resyncP                                              mov     t2,#6'dbgLen                        mov     t3,dbgPtr                        call    #txlongs                        call    #transmit                                                                           mov     rxcnt,#2                        call    #txhdr                        jmp     #txMultB                    txlongs                 call    #transmit                        rdlong  txByte,t3                        call    #transmit                        cmp     txByte,s1 wz                        add     t3,#4                                                        call    #transmit                        call    #transmit              if_z      call    #translong              if_z      add     txByte,#6                                                djnz    t2,#txlongstxlongs_ret             ret                      txErr                   mov     txcnt,cnt                        add     txcnt,stopticks                        mov     rxcnt,#5                        call    #txhdr                        jmp     #txcfgstr                        txhdr                   mov     txByte,s1                        call    #translong                        add     txByte,rxcnt                        ror     txByte,#8                        call    #translongtxhdr_ret               ret             txMem                   mov     txcnt,cnt                        add     txcnt,stopticks    :txloop             mov     t2,memPtr                        rdlong  t3,t2                        call    #translong                        mov     rxcnt,#3                        call    #txhdr                        jmp     #:txloop'sends out memory, headertxAll                   mov     t3,doall                        mov     t2,#0                        mov     rxcnt,#1                                                mov     txcnt,cnt                        add     txcnt,stopticks                        call    #txhdr                        call    #transmit    :txloop             rdlong  txbyte,t2                        add     t2,#4                            call    #translong                        djnz    t3,#:txloop                        mov     rxcnt,#7                        call    #txhdr                        jmp     #txdata                                                                       txCfgStr                mov     txcnt,cnt                        add     txcnt,stopticks                            :txloop             mov     txByte,varLen                        add     txByte,conduitState                        call    #transLong                        mov     txByte,qsLen                         call    #transLong                        mov     txByte,tvLen                         call    #transLong                        mov     txByte,fzLen                         call    #transLong                        mov     txByte,memPtr                         call    #transLong                        mov     txByte,varPtr                         call    #transLong                                                mov     t2,txstrptr0                        call    #txStr                        mov     t2,txstrptr1                        call    #txStr                        mov     t2,txstrptr2                        call    #txStr                        mov     t2,txstrptr3                        call    #txStr                        mov     t2,txstrptr4                        call    #txStr                        mov     t2,txstrptr5                        call    #txStr                        mov     rxcnt,#4                        call    #txhdr                        jmp     #:txloop                        txStr                   add     txcnt,bitticks                        tjnz    t2,#:chars                        mov     txByte,#0                        call    #transmit                        jmp     #txStr_ret:chars                  rdbyte  txByte,t2                        mov     t3,txByte                        call    #transmit                        add     t2,#1                        tjnz    t3,#:charstxStr_ret               ret                        transLong                        call #transmit                        call    #transmit                        call    #transmit                        call    #transmittransLong_ret           rettransmit                waitcnt txcnt,bitticks                           and     outa,tximask                            mov     t1,#8:bit                    test    rxmask,ina      wc                                    if_nc       jmp     #receive                        ror     txByte,#1       wc                        waitcnt txcnt,bitticks                             muxc    outa,txmask                        djnz    t1,#:bit                        waitcnt txcnt,stopticks                                                                  or      outa,txmask     transmit_ret            retbitticks                long    40doall                   long    8192stopticks               long    80s1                      long    $E1E1E1E1txstrptr0               long    0txstrptr1               long    0txstrptr2               long    0txstrptr3               long    0txstrptr4               long    0txstrptr5               long    0varPtr                  long    0qsPtr                   long    0tvPtr                   long    0fzPtr                   long    0memPtr                  long    0varLen                  long    0qsLen                   long    0tvLen                   long    0fzLen                   long    0conduitState            long    100<<16conduitState2           long    101<<16hsec                    long    8_000_000resyncp                 long    0 resynccnt               long    0 qscog                   long    0sync                    long    0xtime                   long    0ncog                    long    0t1                      long    0 t2                      long    0t3                      long    0t4                      long    0rxmask                  long    RXPINtxmask                  long    TXPINtximask                 long    0spinticks               long    2000dbptr                   long    1dbgPtr                  long    1{constants for slow serial connection- at 80mhz equates to 115kbps.xt is the time in cycles to send 360 longs, at 96mhz should be 17_280_000}bittick10               long    0bittick15               long    0bitticks115k            long    0xt2mb                   long    360*2000*1   xt1mb                   long    360*2000*2  xt115k                  long    360*2000*20statusPtr                 long    0statusCtr                 long    0 xt                      res     1rxcnt                   res     1txByte                  res     1txcnt                   res     1