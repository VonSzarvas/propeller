''120Hz 'Zero-Crossing" pulse generated with PWM version of NCO/PWM counter modeCON _clkmode = xtal1 + pll16x_xinfreq = 5_000_000VAR long parameterPUB go(ClockPin){Enter with ClockPin = pin to generate simulated 120-Hz clock pulse onNormally would have the transistor side of a A11AA1 Opto-Isolator pulled to +3.3V through a 10k resistor going to the Propeller ClockPinand the LED side connected to 120Vac via a 15k resistor off BOTH LED pins (120V / 30k total resistance = 4mA total current through LEDs).}   diraval := |< ClockPinctraval := ctraval + ClockPincognew(@entry, @parameter) 'start assembly cogparameter := 8_000 ' 80_000_000 / 8_000 = 100uS Pulse Width = HIGH for this period of timeDAT''assembly cog fetches the value in parameter for PWM perecentageorgentry   mov dira, diraval 'set APIN to output        mov ctra, ctraval 'establish counter A mode and APIN        mov frqa, #1 'set counter to increment 1 each cycle        mov time, cnt 'record current time        add time, period 'establish next period        :loop   rdlong value, par 'get an up to date pulse width        waitcnt time, period 'wait until next period        neg phsa, value 'back up phsa so that it trips "value" cycles from now        jmp #:loop 'loop for next cyclediraval long 0ctraval long %00100 << 26 'NCO/PWM APIN=0period long 666_667 '(_clkfreq / period; 80_000_000/120 = 666_667)time res 1value res 1