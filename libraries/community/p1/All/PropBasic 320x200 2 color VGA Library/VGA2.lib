' This code generates 320x240 pixel (40x30 text) 2 color VGA display
' The two colors are contain within a palette. Each palette entry controls 8 horizontal pixels by 8 vertical pixels
'

' Define HUB variables
VGA_vgaMem  HUB BYTE(9600) = 0 ' (320x240 pixels)
VGA_palette HUB WORD(1200) = $FF_03 ' $FF=white(1), $03=black(0); Bit0 and Bit1 MUST always be 1
                                    ' $C3=red, $0F=blue

' Define TASKs
VGA2_Video  TASK AUTO


' Define variables (LONGs only)
VGA_curX      VAR LONG = 0   ' Left
VGA_curY      VAR LONG = 0   ' Top
VGA_foreColor VAR LONG = $FF ' White
VGA_backColor VAR LONG = 0   ' Black


' Define Subroutines
VGA_Print      SUB 1     ' "String"
VGA_PrintAt    SUB 3     ' X, Y, "String"
VGA_Char       SUB 1     ' character value
VGA_SetFColor  SUB 1     ' Sets default Foreground color (0-63); 64=Transparent (not changed)
VGA_SetBColor  SUB 1     ' Sets default Background color (0-63); 64=Transparent (not changed)
VGA_SetPos     SUB 2     ' Sets current X, Y drawing positions
VGA_Plot       SUB 2,3   ' X, Y{,Foreground Color}
VGA_UnPlot     SUB 2,3   ' X, Y{,Background Color}
VGA_PlotTo     SUB 2     ' newX, newY{, Foreground Color}
VGA_UnPlotTo   SUB 2     ' newX, newY{, Background Color}


'{$CODE}


'{$IFUSED VGA_Print}
SUB VGA_Print
  __param3 = __param1
  VGA_PrintAt VGA_curX, VGA_curY, __param3
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_PrintAt}
SUB VGA_PrintAt ' X, Y, "String"
  VGA_txtPtr VAR LONG

  VGA_curX = __param1
  VGA_curY = __param2
  VGA_txtPtr = __param3
  DO
    RDBYTE VGA_txtPtr, __param1
    IF __param1 = 0 THEN EXIT
    VGA_Char __param1
    INC VGA_txtPtr
  LOOP
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_Char}
VGA_Font DATA $00, $00, $00, $00, $00, $00, $00, $00 ' (space)
     DATA $30, $78, $78, $30, $30, $00, $30, $00 ' !
     DATA $6C, $6C, $28, $00, $00, $00, $00, $00 ' " "
     DATA $6C, $6C, $FE, $6C, $FE, $6C, $6C, $00 ' #
     DATA $18, $7E, $C0, $7C, $06, $FC, $18, $00 ' $
     DATA $00, $C6, $CC, $18, $30, $66, $C6, $00 ' %
     DATA $38, $6C, $38, $76, $DC, $CC, $76, $00 ' &
     DATA $30, $30, $60, $00, $00, $00, $00, $00 ' '
     DATA $18, $30, $60, $60, $60, $30, $18, $00 ' (
     DATA $60, $30, $18, $18, $18, $30, $60, $00 ' )
     DATA $00, $66, $3C, $FF, $3C, $66, $00, $00 ' *
     DATA $00, $30, $30, $FC, $30, $30, $00, $00 ' +
     DATA $00, $00, $00, $00, $00, $30, $30, $60 ' ,
     DATA $00, $00, $00, $FC, $00, $00, $00, $00 ' -
     DATA $00, $00, $00, $00, $00, $30, $30, $00 ' .
     DATA $06, $0C, $18, $30, $60, $C0, $80, $00 ' /
     DATA $7C, $C6, $C6, $D6, $C6, $C6, $7C, $00 ' 0
     DATA $30, $70, $30, $30, $30, $30, $FC, $00 ' 1
     DATA $78, $CC, $0C, $38, $60, $CC, $FC, $00 ' 2
     DATA $78, $CC, $0C, $38, $0C, $CC, $78, $00 ' 3
     DATA $1C, $3C, $6C, $CC, $FE, $0C, $1E, $00 ' 4
     DATA $FC, $C0, $F8, $0C, $0C, $CC, $78, $00 ' 5
     DATA $38, $60, $C0, $F8, $CC, $CC, $78, $00 ' 6
     DATA $FC, $CC, $0C, $18, $30, $30, $30, $00 ' 7
     DATA $78, $CC, $CC, $78, $CC, $CC, $78, $00 ' 8
     DATA $78, $CC, $CC, $7C, $0C, $18, $70, $00 ' 9
     DATA $00, $30, $30, $00, $00, $30, $30, $00 ' :
     DATA $00, $30, $30, $00, $00, $30, $30, $60 ' ;
     DATA $18, $30, $60, $C0, $60, $30, $18, $00 ' <
     DATA $00, $00, $FC, $00, $00, $FC, $00, $00 ' =
     DATA $60, $30, $18, $0C, $18, $30, $60, $00 ' >
     DATA $78, $CC, $0C, $18, $30, $00, $30, $00 ' ?
     DATA $7C, $C6, $DE, $DE, $DC, $C0, $78, $00 ' @
     DATA $30, $78, $CC, $CC, $FC, $CC, $CC, $00 ' A
     DATA $FC, $66, $66, $7C, $66, $66, $FC, $00 ' B
     DATA $3C, $66, $C0, $C0, $C0, $66, $3C, $00 ' C
     DATA $F8, $6C, $66, $66, $66, $6C, $F8, $00 ' D
     DATA $FE, $62, $68, $78, $68, $62, $FE, $00 ' E
     DATA $FE, $62, $68, $78, $68, $60, $F0, $00 ' F
     DATA $3C, $66, $C0, $C0, $CE, $66, $3E, $00 ' G
     DATA $CC, $CC, $CC, $FC, $CC, $CC, $CC, $00 ' H
     DATA $78, $30, $30, $30, $30, $30, $78, $00 ' I
     DATA $1E, $0C, $0C, $0C, $CC, $CC, $78, $00 ' J
     DATA $E6, $66, $6C, $78, $6C, $66, $E6, $00 ' K
     DATA $F0, $60, $60, $60, $62, $66, $FE, $00 ' L
     DATA $C6, $EE, $FE, $FE, $D6, $C6, $C6, $00 ' M
     DATA $C6, $E6, $F6, $DE, $CE, $C6, $C6, $00 ' N
     DATA $38, $6C, $C6, $C6, $C6, $6C, $38, $00 ' O
     DATA $FC, $66, $66, $7C, $60, $60, $F0, $00 ' P
     DATA $78, $CC, $CC, $CC, $DC, $78, $1C, $00 ' Q
     DATA $FC, $66, $66, $7C, $6C, $66, $E6, $00 ' R
     DATA $78, $CC, $C0, $78, $0C, $CC, $78, $00 ' S
     DATA $FC, $B4, $30, $30, $30, $30, $78, $00 ' T
     DATA $CC, $CC, $CC, $CC, $CC, $CC, $FC, $00 ' U
     DATA $CC, $CC, $CC, $CC, $CC, $78, $30, $00 ' V
     DATA $C6, $C6, $C6, $D6, $FE, $EE, $C6, $00 ' W
     DATA $C6, $6C, $38, $38, $6C, $C6, $C6, $00 ' X
     DATA $CC, $CC, $CC, $78, $30, $30, $78, $00 ' Y
     DATA $FE, $C6, $8C, $18, $32, $66, $FE, $00 ' Z
     DATA $78, $60, $60, $60, $60, $60, $78, $00 ' [
     DATA $C0, $60, $30, $18, $0C, $06, $02, $00 ' \
     DATA $78, $18, $18, $18, $18, $18, $78, $00 ' ]
     DATA $10, $38, $6C, $C6, $00, $00, $00, $00 ' ^
     DATA $00, $00, $00, $00, $00, $00, $00, $FF ' _
     DATA $30, $18, $0C, $00, $00, $00, $00, $00 ' `
     DATA $00, $00, $78, $0C, $7C, $CC, $76, $00 ' a
     DATA $E0, $60, $60, $7C, $66, $66, $DC, $00 ' b
     DATA $00, $00, $78, $CC, $C0, $CC, $78, $00 ' c
     DATA $1C, $0C, $0C, $7C, $CC, $CC, $76, $00 ' d
     DATA $00, $00, $78, $CC, $FC, $C0, $78, $00 ' e
     DATA $38, $6C, $60, $F0, $60, $60, $F0, $00 ' f
     DATA $00, $00, $76, $CC, $CC, $7C, $0C, $F8 ' g
     DATA $E0, $60, $6C, $76, $66, $66, $E6, $00 ' h
     DATA $30, $00, $70, $30, $30, $30, $78, $00 ' i
     DATA $0C, $00, $0C, $0C, $0C, $CC, $CC, $78 ' j
     DATA $E0, $60, $66, $6C, $78, $6C, $E6, $00 ' k
     DATA $70, $30, $30, $30, $30, $30, $78, $00 ' l
     DATA $00, $00, $CC, $FE, $D6, $D6, $C6, $00 ' m
     DATA $00, $00, $F8, $CC, $CC, $CC, $CC, $00 ' n
     DATA $00, $00, $78, $CC, $CC, $CC, $78, $00 ' o
     DATA $00, $00, $DC, $66, $66, $7C, $60, $F0 ' p
     DATA $00, $00, $76, $CC, $CC, $7C, $0C, $1E ' q
     DATA $00, $00, $DC, $76, $66, $60, $F0, $00 ' r
     DATA $00, $00, $7C, $C0, $78, $0C, $F8, $00 ' s
     DATA $10, $30, $7C, $30, $30, $34, $18, $00 ' t
     DATA $00, $00, $CC, $CC, $CC, $CC, $76, $00 ' u
     DATA $00, $00, $CC, $CC, $CC, $78, $30, $00 ' v
     DATA $00, $00, $C6, $D6, $D6, $FE, $6C, $00 ' w
     DATA $00, $00, $C6, $6C, $38, $6C, $C6, $00 ' x
     DATA $00, $00, $CC, $CC, $CC, $7C, $0C, $F8 ' y
     DATA $00, $00, $FC, $98, $30, $64, $FC, $00 ' z
     DATA $1C, $30, $30, $E0, $30, $30, $1C, $00 ' {
     DATA $30, $30, $30, $30, $30, $30, $30, $00 ' |
     DATA $E0, $30, $30, $1C, $30, $30, $E0, $00 ' }
     DATA $76, $DC, $00, $00, $00, $00, $00, $00 ' ~
     DATA $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ' Block


SUB VGA_Char ' character value
  VGA_tmpX    VAR LONG
  VGA_tmpY    VAR LONG
  VGA_pixels  VAR LONG
  VGA_fontPtr VAR LONG

  __param1 = __param1 - " "
  __param1 = __param1 * 8
  VGA_fontPtr = GetAddr VGA_Font(__param1)
  FOR VGA_tmpY = 0 TO 7
    RDBYTE VGA_fontPtr, VGA_pixels
    INC VGA_fontPtr
    FOR VGA_tmpX = 0 TO 7
      IF VGA_pixels > 127 THEN
        VGA_Plot VGA_curX, VGA_curY
      ELSE
        VGA_UnPlot VGA_curX, VGA_curY
      ENDIF
      VGA_pixels = VGA_pixels AND 127
      VGA_pixels = VGA_pixels << 1
      INC VGA_curX
    NEXT
    DEC VGA_curX, 8
    INC VGA_curY
  NEXT
  INC VGA_curX, 8
  IF VGA_curX < 320 THEN
    DEC VGA_curY, 8
  ELSE
    VGA_curX = 0
  ENDIF
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_SetFColor}
SUB VGA_SetFColor
  VGA_foreColor = __param1
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_SetBColor}
SUB VGA_SetBColor
  VGA_backColor = __param1
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_SetPos}
SUB VGA_SetPos
  VGA_curX = __param1
  VGA_curY = __param2
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_PlotTo}
SUB VGA_PlotTo ' newX, newY{, Foreground Color}
  VGA_newX    VAR LONG
  VGA_newY    VAR LONG

  VGA_deltaX  VAR LONG
  VGA_deltaY  VAR LONG
  VGA_dirX    VAR LONG
  VGA_dirY    VAR LONG
  VGA_accum   VAR LONG

  VGA_newX = __param1
  VGA_newY = __param2
  IF __paramCnt = 3 THEN
    VGA_foreColor = __param3
  ENDIF
  VGA_deltaX = VGA_newX - VGA_curX
  VGA_deltaY = VGA_newY - VGA_curY
  VGA_dirX = SGN VGA_deltaX
  VGA_dirY = SGN VGA_deltaY
  VGA_deltaX = ABS VGA_deltaX
  VGA_deltaY = ABS VGA_deltaY

  IF VGA_deltaX > VGA_deltaY THEN
    VGA_accum = VGA_deltaX  / 2
    DO WHILE VGA_curX <> VGA_newX
      VGA_Plot VGA_curX, VGA_curY
      VGA_curX = VGA_curX + VGA_dirX
      VGA_accum = VGA_accum - VGA_deltaY
      IF VGA_accum < 0 THEN
        VGA_curY = VGA_curY + VGA_dirY
        VGA_accum = VGA_accum + VGA_deltaX
      ENDIF
    LOOP
  ELSE
    VGA_accum = VGA_deltaY  / 2
    DO WHILE VGA_curY <> VGA_newY
      VGA_Plot VGA_curX, VGA_curY
      VGA_curY = VGA_curY + VGA_dirY
      VGA_accum = VGA_accum - VGA_deltaX
      IF VGA_accum < 0 THEN
        VGA_curX = VGA_curX + VGA_dirX
        VGA_accum = VGA_accum + VGA_deltaY
      ENDIF
    LOOP
  ENDIF
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_UnPlotTo}
SUB VGA_PlotTo ' newX, newY{, Foreground Color}
  VGA_newX    VAR LONG
  VGA_newY    VAR LONG

  VGA_deltaX  VAR LONG
  VGA_deltaY  VAR LONG
  VGA_dirX    VAR LONG
  VGA_dirY    VAR LONG
  VGA_accum   VAR LONG

  VGA_newX = __param1
  VGA_newY = __param2
  IF __paramCnt = 3 THEN
    VGA_BackColor = __param3
  ENDIF
  VGA_deltaX = VGA_newX - VGA_curX
  VGA_deltaY = VGA_newY - VGA_curY
  VGA_dirX = SGN VGA_deltaX
  VGA_dirY = SGN VGA_deltaY
  VGA_deltaX = ABS VGA_deltaX
  VGA_deltaY = ABS VGA_deltaY

  IF VGA_deltaX > VGA_deltaY THEN
    VGA_accum = VGA_deltaX  / 2
    DO WHILE VGA_curX <> VGA_newX
      VGA_UnPlot VGA_curX, VGA_curY
      VGA_curX = VGA_curX + VGA_dirX
      VGA_accum = VGA_accum - VGA_deltaY
      IF VGA_accum < 0 THEN
        VGA_curY = VGA_curY + VGA_dirY
        VGA_accum = VGA_accum + VGA_deltaX
      ENDIF
    LOOP
  ELSE
    VGA_accum = VGA_deltaY  / 2
    DO WHILE VGA_curY <> VGA_newY
      VGA_UnPlot VGA_curX, VGA_curY
      VGA_curY = VGA_curY + VGA_dirY
      VGA_accum = VGA_accum - VGA_deltaX
      IF VGA_accum < 0 THEN
        VGA_curX = VGA_curX + VGA_dirX
        VGA_accum = VGA_accum + VGA_deltaY
      ENDIF
    LOOP
  ENDIF
ENDSUB
'{$ENDIF}


'{$IFUSED VGA_Plot}
SUB VGA_Plot ' X, Y{,Foreground Color}
  VGA_curX = __param1
  VGA_curY = __param2
  IF __paramcnt = 3 THEN
    VGA_ForeColor = __param3
  ENDIF

  __param1 = VGA_curY * 40
  __param2 = VGA_curX / 8
  __param4 = 1 SHL __remainder
  INC __param1, __param2
  RDBYTE VGA_vgaMem(__param1), __param2
  __param2 = __param2 OR __param4
  WRBYTE VGA_vgaMem(__param1), __param2

  IF VGA_ForeColor < 64 THEN
    __param1 = VGA_curY / 8
    __param1 = __param1 * 40
    __param2 = VGA_curX / 8
    INC __param1, __param2
    RDWORD VGA_palette(__param1), __param2
    __param2 = __param2 AND $03FF
    __param3 = VGA_ForeColor << 10
    __param2 = __param2 OR __param3
    WRWORD VGA_palette(__param1), __param2
  ENDIF
ENDSUB
'{$ENDIF}

'{$IFUSED VGA_UnPlot}
SUB VGA_UnPlot ' X, Y
  VGA_curX = __param1
  VGA_curY = __param2
  IF __paramcnt = 3 THEN
    VGA_BackColor = __param3
  ENDIF

  __param1 = VGA_curY * 40
  __param2 = VGA_curX / 8
  __param4 = 1 SHL __remainder
  INC __param1, __param2
  RDBYTE VGA_vgaMem(__param1), __param2
  __param2 = __param2 ANDN __param4
  WRBYTE VGA_vgaMem(__param1), __param2

  IF VGA_BackColor < 64 THEN
    __param1 = VGA_curY / 8
    __param1 = __param1 * 40
    __param2 = VGA_curX / 8
    INC __param1, __param2
    RDWORD VGA_palette(__param1), __param2
    __param2 = __param2 AND $FF03
    __param3 = VGA_BackColor << 2
    __param2 = __param2 OR __param3
    WRWORD VGA_palette(__param1),__param2
  ENDIF
ENDSUB
'{$ENDIF}


'----------------------------------------------------------------

'{$TASKS}

TASK VGA2_Video ' 320x240 pixel 2 color VGA generator
  VideoPLL16X   CON 15
  VideoPLL8X   CON 14

  VGA_Pins      PIN 23..16 OUTPUT

  lines   VAR LONG
  palLine VAR LONG
  temp    VAR LONG
  memPtr  VAR LONG
  points  VAR LONG
  palPtr  VAR LONG
  curPal  VAR LONG
  nextPal VAR LONG


  PORCH   VAR LONG = $03
  V_PORCH VAR LONG = $02
  HSYNC   VAR LONG = $01
  V_HSYNC VAR LONG = $00

  COUNTERA VideoPLL16X, 0, 0, $1790_0000              ' Setup for counter output
  VSCL = $09_048                                      ' Setup video scale; Pixel clock = PLL / 9
'
'            +-------------------------------------- VMode 00=Disable, 01=VGA, 10=Baseband, 11=broadcast
'            | +------------------------------------ CMode 0=2color, 1=4color
'            | |                      +------------- Pin group 23..16
'            | |                      |       +----- Drive all 8 video pins
  VCFG = %0_01_0_0_0_000_00000000000_010_0_11111111   ' Setup video configuration

  DO
    memPtr = GetAddr VGA_vgaMem
    palPtr = GetAddr VGA_palette
    lines = 30 ' 30*8 = 240
    DO
      palLine = 8
      DO
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID PORCH, 0
        RDLONG palPtr, nextPal
        WAITVID PORCH, 0
        INC palPtr,4
        WAITVID PORCH, 0
        temp = 10
        WAITVID PORCH, 0
        DO
          RDLONG memPtr, points
          curPal = nextPal
          WAITVID curPal, points
          memPtr = memPtr + 4
          points = points SHR 8
          curPal = curPal SHR 16
          WAITVID curPal, points
          RDLONG palPtr, curPal
          palPtr = palPtr + 4
          points = points SHR 8
          WAITVID curPal, points
          RDLONG palPtr, nextPal
          points = points SHR 8
          curPal = curPal SHR 16
          palPtr = palPtr + 4
          WAITVID curPal, points
        LOOP temp
        WAITVID PORCH, 0
        WAITVID PORCH, 0

        ' Repeat same line again
        DEC memPtr, 40
        WAITVID HSYNC, 0
        DEC palPtr,84
        WAITVID HSYNC, 0
        RDLONG palPtr,nextPal
        WAITVID HSYNC, 0
        INC palPtr,4
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID HSYNC, 0
        WAITVID PORCH, 0
        WAITVID PORCH, 0
        WAITVID PORCH, 0
        temp = 10
        WAITVID PORCH, 0
        DO
          RDLONG memPtr, points
          curPal = nextPal
          WAITVID curPal, points
          memPtr = memPtr + 4
          points = points SHR 8
          curPal = curPal SHR 16
          WAITVID curPal, points
          RDLONG palPtr, curPal
          palPtr = palPtr + 4
          points = points SHR 8
          WAITVID curPal, points
          RDLONG palPtr, nextPal
          points = points SHR 8
          curPal = curPal SHR 16
          palPtr = palPtr + 4
          WAITVID curPal, points
        LOOP temp
        WAITVID PORCH, 0
        DEC palPtr,84
        WAITVID PORCH, 0
      LOOP palLine
      INC palPtr,80
    LOOP lines

    ' Vertical front porch 11 blank lines
    lines = 10
    DO
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      temp = 46
      DO
        WAITVID PORCH, 0
      LOOP temp
    LOOP lines

    ' Do vsync lines 2
    lines = 2
    DO
      WAITVID V_HSYNC, 0
      WAITVID V_HSYNC, 0
      WAITVID V_HSYNC, 0
      WAITVID V_HSYNC, 0
      WAITVID V_HSYNC, 0
      WAITVID V_HSYNC, 0
      temp = 46
      DO
        WAITVID V_PORCH, 0
      LOOP temp
    LOOP lines

    ' Vertical back porch 31 blank lines
    lines = 33
    DO
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      WAITVID HSYNC, 0
      temp = 46
      DO
        WAITVID PORCH, 0
      LOOP temp
    LOOP lines
  LOOP ' Frame
ENDTASK


{
!------------------------------------------------------------------------------------------------------------------------------
!                                                   TERMS OF USE: MIT License                                                 !
!-----------------------------------------------------------------------------------------------------------------------------!
!Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation   !
!files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,   !
!modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the        !
!Software is furnished to do so, subject to the following conditions:                                                         !
!                                                                                                                             !
!The above copyright notice and this permission notice shall be included in all copies or substantial portions of the         !
!Software.                                                                                                                    !
!                                                                                                                             !
!THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE         !
!WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR        !
!COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  !
!ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                        !
-------------------------------------------------------------------------------------------------------------------------------
}

