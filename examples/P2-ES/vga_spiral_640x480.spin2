'****************
'*  VGA Spiral  *
'****************
' Reference : http://forums.parallax.com/discussion/comment/1484205/#Comment_1484205
'


CON		vga_base	= 8		'must be a multiple of 8

		intensity	= 90	'0..128

		fclk		= 320_000_000.0
		fpix		= 25_000_000.0
		fset		= (fpix / fclk * 2.0) * float($4000_0000)

		fast		= 1		'0 for small code (10 fps), 1 for fast code (47 fps)

		bitmap		= $400		'rgbi8 bitmap (300 KB)


DAT		org

                hubset  ##%1_000000_0000001111_1111_10_00       'config PLL, 20MHz/1*16*1 = 320MHz
                waitx   ##20_000_000 / 100                      'allow crystal+PLL 10ms to stabilize
                hubset  ##%1_000000_0000001111_1111_10_11       'switch to PLL

		coginit	#1,##@pgm_vga		'launch vga
		coginit	#0,##@pgm_bmap		'launch bitmap cog


'********************************
'*  VGA 640 x 480 x 8bpp rgbi8  *
'********************************

DAT             org

pgm_vga         setxfrq ##round(fset)		'set transfer frequency to fpix

		setcy	##intensity << 24	'r	set colorspace for rgb
		setci	##intensity << 16	'g
		setcq	##intensity << 08	'b
		setcmod	#%01_0_000_0		'enable colorspace conversion

		wrpin	dacmode_hsy,#0<<6 + vga_base + 0	'enable dac mode in pin 0 for hsync
		wrpin	dacmode_rgb,#2<<6 + vga_base + 1	'enable dac modes in pins 1..3 for rgb
		drvl	#3<<6 + vga_base			'enable dac outputs

                rdfast  ##640*480/64,##bitmap   'set rdfast to wrap on bitmap

' Field loop

field           callpa  #10,#blank              'top blanks

                mov     i,#480                  'set visible lines
line            call    #hsync                  'do horizontal sync
                xcont   m_rf,#0		        'do visible line
                djnz    i,#line                 'another line?

                callpa  #33,#blank              'bottom blanks

		drvnot	#vga_base+4		'vsync on

                callpa  #2,#blank               'vsync blanks

		drvnot	#vga_base+4		'vsync off

                jmp     #field                  'loop

' Subroutines

blank           call    #hsync                  'blank lines
                xcont   m_vi,#0
        _ret_   djnz    pa,#blank

hsync           xcont   m_bs,#0			'horizontal sync
                xzero   m_sn,#1
        _ret_   xcont   m_bv,#0

' Data

dacmode_hsy	long	%0000_0000_000_1011000000001_01_00000_0	'123-ohm 3.3V, cog 1 dac channels
dacmode_rgb	long	%0000_0000_000_1011100000001_01_00000_0	'75-ohm 2.0V, cog 1 dac channels

m_bs            long    $7F010000 + 16          'before sync
m_sn            long    $7F010000 + 96          'sync
m_bv            long    $7F010000 + 48          'before visible
m_vi            long    $7F010000 + 640         'visible
m_rf            long    $BF030000 + 640         'visible rfbyte rgbi8

i               res     1


'**************************************
'*  Make spirals in 640 x 480 bitmap  *
'**************************************

		org

pgm_bmap	wrfast	##640*480/64,##bitmap	'set wrfast to wrap on bitmap

		modc	fast * %1111	wc	'fast or slow code?
	if_nc	jmp	#.pixel


' Fast code (47 fps) 4.7x the speed of slow code

.lut		mov	.px,.z			'make lookup table for fast translation
		test	.px,#$20	wc	'convert 6 LSBs to 5-bit up/down ramp
	if_c	xor	.px,#$3F
		and	.px,#$1F
		mov	.py,.z
		shr	.py,#1			'apply 3 MSBs to RGB bits
		and	.py,#$E0
		or	.px,.py
		wrlut	.px,.z
		incmod	.z,#$1FF	wc
	if_nc	jmp	#.lut


.pixels		qvector	.x,.y	'0 in		do overlapped QVECTOR ops for 16 pixels

		add	.x,#1	'1 in
		qvector	.x,.y

		add	.x,#1	'2 in
		qvector	.x,.y

		add	.x,#1	'3 in
		qvector	.x,.y

		add	.x,#1	'4 in
		qvector	.x,.y

		add	.x,#1	'5 in
		qvector	.x,.y

		add	.x,#1	'6 in
		qvector	.x,.y

		add	.x,#1	'7 in
		qvector	.x,.y

		getqx	.px+0	'0 out
		getqy	.py+0

		add	.x,#1	'8 in
		qvector	.x,.y

		getqx	.px+1	'1 out
		getqy	.py+1

		add	.x,#1	'9 in
		qvector	.x,.y

		getqx	.px+2	'2 out
		getqy	.py+2

		add	.x,#1	'10 in
		qvector	.x,.y

		getqx	.px+3	'3 out
		getqy	.py+3

		add	.x,#1	'11 in
		qvector	.x,.y

		getqx	.px+4	'4 out
		getqy	.py+4

		add	.x,#1	'12 in
		qvector	.x,.y

		getqx	.px+5	'5 out
		getqy	.py+5

		add	.x,#1	'13 in
		qvector	.x,.y

		getqx	.px+6	'6 out
		getqy	.py+6

		add	.x,#1	'14 in
		qvector	.x,.y

		getqx	.px+7	'7 out
		getqy	.py+7

		add	.x,#1	'15 in
		qvector	.x,.y

		getqx	.px+8	'8 out
		getqy	.py+8

		shr	.py+0,#32-9		'get 9 MSBs of theta (stuff code between GETQx ops)
		add	.py+0,.px+0		'add rho to twist it

		getqx	.px+9	'9 out
		getqy	.py+9

		shr	.py+1,#32-9
		add	.py+1,.px+1

		getqx	.px+10	'10 out
		getqy	.py+10

		shr	.py+2,#32-9
		add	.py+2,.px+2

		getqx	.px+11	'11 out
		getqy	.py+11

		shr	.py+3,#32-9
		add	.py+3,.px+3

		getqx	.px+12	'12 out
		getqy	.py+12

		shr	.py+4,#32-9
		add	.py+4,.px+4

		getqx	.px+13	'13 out
		getqy	.py+13

		shr	.py+5,#32-9
		add	.py+5,.px+5

		getqx	.px+14	'14 out
		getqy	.py+14

		shr	.py+6,#32-9
		add	.py+6,.px+6

		getqx	.px+15	'15 out
		getqy	.py+15


		add	.py+0,.z		'add z to slowly spin it
		rdlut	.py+0,.py+0		'lookup rgbi8 color
		wfbyte	.py+0			'write rgbi8 pixel to bitmap

		add	.py+1,.z
		rdlut	.py+1,.py+1
		wfbyte	.py+1

		add	.py+2,.z
		rdlut	.py+2,.py+2
		wfbyte	.py+2

		add	.py+3,.z
		rdlut	.py+3,.py+3
		wfbyte	.py+3

		add	.py+4,.z
		rdlut	.py+4,.py+4
		wfbyte	.py+4

		add	.py+5,.z
		rdlut	.py+5,.py+5
		wfbyte	.py+5

		add	.py+6,.z
		rdlut	.py+6,.py+6
		wfbyte	.py+6

		shr	.py+7,#32-9
		add	.py+7,.px+7
		add	.py+7,.z
		rdlut	.py+7,.py+7
		wfbyte	.py+7

		shr	.py+8,#32-9
		add	.py+8,.px+8
		add	.py+8,.z
		rdlut	.py+8,.py+8
		wfbyte	.py+8

		shr	.py+9,#32-9
		add	.py+9,.px+9
		add	.py+9,.z
		rdlut	.py+9,.py+9
		wfbyte	.py+9

		shr	.py+10,#32-9
		add	.py+10,.px+10
		add	.py+10,.z
		rdlut	.py+10,.py+10
		wfbyte	.py+10

		shr	.py+11,#32-9
		add	.py+11,.px+11
		add	.py+11,.z
		rdlut	.py+11,.py+11
		wfbyte	.py+11

		shr	.py+12,#32-9
		add	.py+12,.px+12
		add	.py+12,.z
		rdlut	.py+12,.py+12
		wfbyte	.py+12

		shr	.py+13,#32-9
		add	.py+13,.px+13
		add	.py+13,.z
		rdlut	.py+13,.py+13
		wfbyte	.py+13

		shr	.py+14,#32-9
		add	.py+14,.px+14
		add	.py+14,.z
		rdlut	.py+14,.py+14
		wfbyte	.py+14

		shr	.py+15,#32-9
		add	.py+15,.px+15
		add	.py+15,.z
		rdlut	.py+15,.py+15
		wfbyte	.py+15

		incmod	.x,#640/2-1	wc	'check if x at limit
	if_c	neg	.x,#640/2
	if_c	incmod	.y,#480/2-1	wc	'step y
	if_c	neg	.y,#480/2
	if_c	sub	.z,#1			'step z
	if_c	drvnot	#56			'toggle P56 for speed check
		jmp	#.pixels


' Slow code (10 fps)

.pixel		qvector	.x,.y			'convert (x,y) to polar (rho,theta)
		getqx	.px
		getqy	.py

		shr	.py,#32-9		'get 9 MSBs of theta
		add	.py,.px			'add rho to twist it
		add	.py,.z			'add z to slowly spin it

		mov	.px,.py			'convert 6 LSBs to 5-bit up/down ramp
		test	.px,#$20	wc
	if_c	xor	.px,#$3F
		and	.px,#$1F

		shr	.py,#1			'apply 3 MSBs to RGB bits
		and	.py,#$E0
		or	.px,.py

		wfbyte	.px			'write rgbi8 pixel to bitmap

		incmod	.x,#640/2-1	wc	'step x
	if_c	neg	.x,#640/2
	if_c	incmod	.y,#480/2-1	wc	'step y
	if_c	neg	.y,#480/2
	if_c	sub	.z,#1			'step z
	if_c	drvnot	#56			'toggle P56 for speed check
		jmp	#.pixel

' Data

.x		long	-640/2
.y		long	-480/2
.z		long	0
.px		res	16
.py		res	16